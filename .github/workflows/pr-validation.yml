name: PR Validation

on:
  pull_request:
    types: [opened, synchronize, reopened]

permissions:
  contents: read
  pull-requests: write
  checks: write

jobs:
  validate-pr:
    name: Validate PR
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v5
      with:
        fetch-depth: 0
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: 20.x
        cache: 'npm'
    
    - name: Cache dependencies
      uses: actions/cache@v3
      with:
        path: ~/.npm
        key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-node-
    
    - name: Install dependencies
      run: npm ci
    
    - name: Check code formatting
      run: npm run format -- --check
      id: format-check
      continue-on-error: true
    
    - name: Run ESLint
      run: npm run lint -- --format json --output-file eslint-report.json
      id: eslint
      continue-on-error: true
    
    - name: Build TypeScript
      run: npm run build
      id: build
    
    - name: Run tests with coverage
      run: npm test -- --coverage --reporter=json --outputFile=test-results.json
      id: test
      continue-on-error: true
    
    - name: Comment PR with results
      uses: actions/github-script@v7
      if: always()
      with:
        script: |
          const fs = require('fs');
          let comment = '## 🔍 PR Validation Results\n\n';
          
          // Format check
          if (${{ steps.format-check.outcome == 'success' }}) {
            comment += '✅ **Code Formatting**: Passed\n';
          } else {
            comment += '❌ **Code Formatting**: Failed - Run `npm run format` to fix\n';
          }
          
          // ESLint check
          if (${{ steps.eslint.outcome == 'success' }}) {
            comment += '✅ **ESLint**: No issues found\n';
          } else {
            comment += '⚠️ **ESLint**: Issues found - Check logs for details\n';
          }
          
          // Build check
          if (${{ steps.build.outcome == 'success' }}) {
            comment += '✅ **TypeScript Build**: Successful\n';
          } else {
            comment += '❌ **TypeScript Build**: Failed\n';
          }
          
          // Test check
          if (${{ steps.test.outcome == 'success' }}) {
            comment += '✅ **Tests**: All tests passed\n';
          } else {
            comment += '❌ **Tests**: Some tests failed\n';
          }
          
          // Add coverage info if available
          try {
            const coverage = JSON.parse(fs.readFileSync('coverage/coverage-summary.json', 'utf8'));
            const total = coverage.total;
            comment += '\n### 📊 Coverage Report\n';
            comment += `- Statements: ${total.statements.pct}%\n`;
            comment += `- Branches: ${total.branches.pct}%\n`;
            comment += `- Functions: ${total.functions.pct}%\n`;
            comment += `- Lines: ${total.lines.pct}%\n`;
          } catch (e) {
            // Coverage not available
          }
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: comment
          });

  size-check:
    name: Bundle Size Check
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v5
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: 20.x
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Build project
      run: npm run build
    
    - name: Check bundle size
      run: |
        echo "## Bundle Size Report" >> $GITHUB_STEP_SUMMARY
        echo "| File | Size |" >> $GITHUB_STEP_SUMMARY
        echo "|------|------|" >> $GITHUB_STEP_SUMMARY
        find dist -name "*.js" -exec du -h {} \; | while read size file; do
          echo "| ${file#dist/} | $size |" >> $GITHUB_STEP_SUMMARY
        done